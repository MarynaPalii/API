{
	"info": {
		"_postman_id": "d3ac3aee-b05c-41ce-8eef-66df26549baf",
		"name": "E2E Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "29257426"
	},
	"item": [
		{
			"name": "Register new student account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Message validation\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User was created\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"maryna_e2e_test@fakeemail.com\",\n  \"name\": \"Maryna P\",\n  \"password\": \"Palii2023\",\n  \"group\": \"123456\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/sign-up"
			},
			"response": []
		},
		{
			"name": "Get activation code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"studentId\", jsonData[0].id);",
							"pm.environment.set(\"activationCode\", jsonData[0].activationCode);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/api/users?_where=(email,eq,artem_e2e_test@fakeemail.com)",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "_where",
							"value": "(email,eq,artem_e2e_test@fakeemail.com)"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Activate student account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Message validation\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User was activated\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/activate/{{studentId}}/{{activationCode}}"
			},
			"response": []
		},
		{
			"name": "Student sign-in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"studentToken\", jsonData.token);",
							"",
							"pm.test(\"Validate user email\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user.email).to.eql(\"maryna_e2e_test@fakeemail.com\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"maryna_e2e_test@fakeemail.com\",\n  \"password\": \"Palii2023\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/sign-in"
			},
			"response": []
		},
		{
			"name": "Teacher sign-in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"teacherToken\", jsonData.token);",
							"",
							"pm.test(\"Validate user email\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user.email).to.eql(\"nomerovska@gmail.com\");",
							"});",
							"",
							"pm.test(\"User role validation\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user.role).to.eql(\"TEACHER\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"nomerovska@gmail.com\",\n  \"password\": \"Palii0\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/sign-in"
			},
			"response": []
		},
		{
			"name": "Change role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"role\": \"TEACHER\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/users/change-role/{{studentId}}"
			},
			"response": []
		},
		{
			"name": "Create new quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Palii QA Quiz\",\n  \"totalScore\": 18,\n  \"passingPercentage\": 75,\n  \"showStopperQuestion\": 1,\n  \"questions\": [\n    {\n      \"type\": \"TEXTUAL\",\n      \"question\": \"What is QA?\",\n      \"score\": 5\n    },\n    {\n      \"type\": \"SINGLE_CHOICE\",\n      \"question\": \"What does QA do?\",\n      \"score\": 7,\n      \"answer\": 1,\n      \"hasOtherOption\": false,\n      \"options\": [\n        \"Testing software\",\n        \"Develops software\",\n        \"Uses software\",\n        \"None of the above\"\n      ]\n    },\n    {\n      \"type\": \"MULTIPLE_CHOICE\",\n      \"question\": \"Bug report consists of?\",\n      \"score\": 6,\n      \"answers\": [\n        0,\n        1,\n        2\n      ],\n      \"hasOtherOption\": true,\n      \"options\": [\n        \"Bug ID\",\n        \"Severity\",\n        \"Steps to reproduce\",\n        \"Priority\"\n      ]\n    }\n  ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/quiz"
			},
			"response": []
		},
		{
			"name": "Change existing quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Palii QA Quiz\",\n  \"totalScore\": 20,\n  \"passingPercentage\": 75,\n  \"showStopperQuestion\": 1,\n  \"questions\": [\n    {\n      \"type\": \"TEXTUAL\",\n      \"question\": \"Who is QA?\",\n      \"score\": 5\n    },\n    {\n      \"type\": \"SINGLE_CHOICE\",\n      \"question\": \"What does QA do?\",\n      \"score\": 7,\n      \"answer\": 1,\n      \"hasOtherOption\": false,\n      \"options\": [\n        \"Testing software\",\n        \"Develops software\",\n        \"Uses software\",\n        \"None of the above\"\n      ]\n    },\n    {\n      \"type\": \"MULTIPLE_CHOICE\",\n      \"question\": \"Bug report consists of?\",\n      \"score\": 8,\n      \"answers\": [\n        0,\n        1,\n        2\n      ],\n      \"hasOtherOption\": true,\n      \"options\": [\n        \"Bug ID\",\n        \"Severity\",\n        \"Steps to reproduce\",\n        \"Priority\"\n      ]\n    }\n  ],\n  \"id\": 14192\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/quiz"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "quizId",
			"value": "14192,"
		}
	]
}